# Generated by Django 4.1.3 on 2022-12-13 10:11

import accounts.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChangePassword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_password', models.CharField(blank=True, max_length=100)),
                ('new_password', models.CharField(blank=True, max_length=100)),
                ('retype_password', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(db_column='course_code', default=accounts.models.random_string, max_length=10, unique=True)),
                ('course_title', models.CharField(max_length=422)),
                ('course_description', models.TextField()),
                ('course_thumbnail', models.ImageField(null=True, upload_to=accounts.models.filepath)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'courses',
            },
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_title', models.CharField(choices=[('admin', 'Admin'), ('teacher', 'Teacher'), ('student', 'Student')], max_length=100)),
                ('role_description', models.CharField(blank=True, max_length=422)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=accounts.models.fileUserpath)),
                ('profile_description', models.TextField(blank=True, null=True)),
                ('current_position', models.TextField(blank=True, null=True)),
                ('email', models.CharField(max_length=200, null=True)),
                ('address', models.CharField(max_length=100, null=True)),
                ('dob', models.DateTimeField(null=True)),
                ('contact_no', models.CharField(max_length=100, null=True)),
                ('password', models.CharField(max_length=100)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('user_role_id', models.ForeignKey(db_column='user_role_id', on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.roles')),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Tests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(null=True)),
                ('option1', models.TextField(null=True)),
                ('option2', models.TextField(null=True)),
                ('option3', models.TextField(null=True)),
                ('option4', models.TextField(null=True)),
                ('option5', models.TextField(blank=True, null=True)),
                ('correct', models.CharField(choices=[('1', 'Option 1'), ('2', 'Option 2'), ('3', 'Option 3'), ('4', 'Option 4'), ('5', 'Option 5')], max_length=100)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('course_id', models.ForeignKey(db_column='course_id', on_delete=django.db.models.deletion.CASCADE, to='accounts.courses')),
            ],
            options={
                'db_table': 'tests',
            },
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_title', models.CharField(max_length=422, null=True)),
                ('resource_description', models.TextField(null=True)),
                ('resource', models.FileField(null=True, upload_to=accounts.models.filePdfPath)),
                ('resource_type', models.CharField(max_length=10, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('course_id', models.ForeignKey(db_column='course_id', on_delete=django.db.models.deletion.CASCADE, to='accounts.courses')),
            ],
            options={
                'db_table': 'resources',
            },
        ),
        migrations.CreateModel(
            name='FeesPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paid_amount', models.IntegerField()),
                ('payment_image', models.ImageField(null=True, upload_to=accounts.models.filePaymentPath)),
                ('payment_method', models.CharField(choices=[('Card', 'Card'), ('Bank account', 'Bank account')], max_length=100)),
                ('status', models.CharField(choices=[('1', 'true'), ('0', 'false')], max_length=100)),
                ('paid_to', models.CharField(max_length=100)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('course_id', models.ForeignKey(db_column='course_id', on_delete=django.db.models.deletion.CASCADE, to='accounts.courses')),
                ('paid_from', models.ForeignKey(db_column='paid_from', on_delete=django.db.models.deletion.CASCADE, to='accounts.users')),
            ],
            options={
                'db_table': 'payments',
            },
        ),
        migrations.CreateModel(
            name='Fees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.IntegerField(blank=True, null=True)),
                ('discount_percentage', models.IntegerField(blank=True, null=True)),
                ('discount_amount', models.CharField(blank=True, max_length=100)),
                ('is_free', models.BooleanField(blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('course_id', models.OneToOneField(blank=True, db_column='course_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.courses')),
            ],
            options={
                'db_table': 'fees',
            },
        ),
        migrations.CreateModel(
            name='Enrolls',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_id', models.CharField(blank=True, max_length=422)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('course_id', models.ForeignKey(db_column='course_id', on_delete=django.db.models.deletion.CASCADE, to='accounts.courses')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to='accounts.users')),
            ],
            options={
                'db_table': 'enrolls',
            },
        ),
        migrations.CreateModel(
            name='Duration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration_time', models.CharField(max_length=422)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('course_id', models.ForeignKey(db_column='course_id', on_delete=django.db.models.deletion.CASCADE, to='accounts.courses')),
            ],
            options={
                'db_table': 'durations',
            },
        ),
        migrations.AddField(
            model_name='courses',
            name='user_id',
            field=models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to='accounts.users'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False, verbose_name='student status')),
                ('is_teacher', models.BooleanField(default=False, verbose_name='teacher status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
